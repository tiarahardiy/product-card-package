'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = require('fs');
var fs__default = _interopDefault(fs);
var path = require('path');
var path__default = _interopDefault(path);
var rollupPluginutils = require('rollup-pluginutils');
var crypto = _interopDefault(require('crypto'));

var _0777 = parseInt('0777', 8);

var mkdirp = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

function mkdirP (p, opts, f, made) {
    if (typeof opts === 'function') {
        f = opts;
        opts = {};
    }
    else if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs__default;
    
    if (mode === undefined) {
        mode = _0777 & (~process.umask());
    }
    if (!made) { made = null; }
    
    var cb = f || function () {};
    p = path__default.resolve(p);
    
    xfs.mkdir(p, mode, function (er) {
        if (!er) {
            made = made || p;
            return cb(null, made);
        }
        switch (er.code) {
            case 'ENOENT':
                mkdirP(path__default.dirname(p), opts, function (er, made) {
                    if (er) { cb(er, made); }
                    else { mkdirP(p, opts, cb, made); }
                });
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                xfs.stat(p, function (er2, stat) {
                    // if the stat fails, then that's super weird.
                    // let the original error be the failure reason.
                    if (er2 || !stat.isDirectory()) { cb(er, made); }
                    else { cb(null, made); }
                });
                break;
        }
    });
}

mkdirP.sync = function sync (p, opts, made) {
    if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs__default;
    
    if (mode === undefined) {
        mode = _0777 & (~process.umask());
    }
    if (!made) { made = null; }

    p = path__default.resolve(p);

    try {
        xfs.mkdirSync(p, mode);
        made = made || p;
    }
    catch (err0) {
        switch (err0.code) {
            case 'ENOENT' :
                made = sync(path__default.dirname(p), opts, made);
                sync(p, opts, made);
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                var stat;
                try {
                    stat = xfs.statSync(p);
                }
                catch (err1) {
                    throw err0;
                }
                if (!stat.isDirectory()) { throw err0; }
                break;
        }
    }

    return made;
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var isStream_1 = createCommonjsModule(function (module) {
'use strict';

var isStream = module.exports = function (stream) {
	return stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function';
};

isStream.writable = function (stream) {
	return isStream(stream) && stream.writable !== false && typeof stream._write === 'function' && typeof stream._writableState === 'object';
};

isStream.readable = function (stream) {
	return isStream(stream) && stream.readable !== false && typeof stream._read === 'function' && typeof stream._readableState === 'object';
};

isStream.duplex = function (stream) {
	return isStream.writable(stream) && isStream.readable(stream);
};

isStream.transform = function (stream) {
	return isStream.duplex(stream) && typeof stream._transform === 'function' && typeof stream._transformState === 'object';
};
});

var hasha_1 = createCommonjsModule(function (module) {
'use strict';




var hasha = function (input, opts) {
	opts = opts || {};

	var outputEncoding = opts.encoding || 'hex';

	if (outputEncoding === 'buffer') {
		outputEncoding = undefined;
	}

	var hash = crypto.createHash(opts.algorithm || 'sha512');

	var update = function (buf) {
		var inputEncoding = typeof buf === 'string' ? 'utf8' : undefined;
		hash.update(buf, inputEncoding);
	};

	if (Array.isArray(input)) {
		input.forEach(update);
	} else {
		update(input);
	}

	return hash.digest(outputEncoding);
};

hasha.stream = function (opts) {
	opts = opts || {};

	var outputEncoding = opts.encoding || 'hex';

	if (outputEncoding === 'buffer') {
		outputEncoding = undefined;
	}

	var stream = crypto.createHash(opts.algorithm || 'sha512');
	stream.setEncoding(outputEncoding);
	return stream;
};

hasha.fromStream = function (stream, opts) {
	if (!isStream_1(stream)) {
		return Promise.reject(new TypeError('Expected a stream'));
	}

	opts = opts || {};

	return new Promise(function (resolve, reject) {
		stream
			.on('error', reject)
			.pipe(hasha.stream(opts))
			.on('error', reject)
			.on('finish', function () {
				resolve(this.read());
			});
	});
};

hasha.fromFile = function (fp, opts) { return hasha.fromStream(fs__default.createReadStream(fp), opts); };

hasha.fromFileSync = function (fp, opts) { return hasha(fs__default.readFileSync(fp), opts); };

module.exports = hasha;
});

var files = function (options) {
	if ( options === void 0 ) options = {};

	var extensions = options.extensions;
	var filter = rollupPluginutils.createFilter(options.include, options.exclude);

	return {
		name: 'files',
		load: function load(filePath) {
      if (!filter(filePath)) { return null; }
      if (!extensions) { return null; }

			var ext = path.extname(filePath);
      if (!extensions.test(ext)) { return null; }

      var outputDir = path.relative('./', options.output) || '';
      mkdirp.sync(outputDir);

      var fileName = path.basename(filePath);

      if (options.hash) {
        var hash = hasha_1(fs.readFileSync(filePath).toString(), { algorithm: 'md5' });
        fileName = (path.basename(filePath, ext)) + "-" + hash + ext;
      }

      var outputFilePath = outputDir + "/" + fileName;
      fs.createReadStream(filePath).pipe(fs.createWriteStream(outputFilePath));
      return ("export default \"" + (outputFilePath.split('/').splice(1).join('/')) + "\"");
		}
	};
};

module.exports = files;
